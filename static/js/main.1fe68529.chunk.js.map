{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","todos","setTodos","todoString","setTodoString","currentView","setCurrentView","useEffect","a","localStorage","getItem","locatTodos","JSON","parse","addTodo","todoToAdd","id","v4","isDone","allTodos","push","setItem","stringify","console","log","length","markComplete","todoID","map","todo","RemainingTodos","remainingTodos","filter","ListGroup","ListGroupItem","style","float","className","onClick","AllTodos","CompletedTodos","completedTodos","InputGroup","Input","type","placeholder","value","onChange","e","target","Button","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe68529.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {v4} from \"uuid\"\n\nimport {\n  Input,\n  InputGroup,\n  Button,\n  ListGroup,\n  ListGroupItem\n} from \"reactstrap\"\n\nimport {\n  FaCheckDouble\n} from \"react-icons/fa\"\n\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./App.css\"\n\nconst App = () => {\n\n  const [todos, setTodos] = useState([])\n  const [todoString, setTodoString] = useState(\"\")\n  const [currentView, setCurrentView] = useState(1)\n\n  useEffect(async () => {\n    const locatTodos = await localStorage.getItem(\"todos\")\n    if(locatTodos)\n    {\n      setTodos(JSON.parse(locatTodos))\n    }\n  }, [])\n\n  const addTodo = async () => {\n    \n\n    const todoToAdd = {\n      todoString,\n      id:v4(),\n      isDone : false\n    }\n\n    \n\n    let allTodos = todos\n    allTodos.push(todoToAdd)\n    setTodos(allTodos)\n\n    await localStorage.setItem(\"todos\",JSON.stringify(todos))\n\n    console.log(todos[todos.length -1]);\n\n    setTodoString(\"\")\n\n  }\n\n  const markComplete = async todoID => {\n    todos.map(todo => {\n      todo.id === todoID && todo.isDone !== true ? todo.isDone = true : \n      console.log(todo);\n    })\n\n    await localStorage.setItem(\"todos\",JSON.stringify(todos))\n  }\n\n  const clearTodos = () => {\n    setTodos([])\n    localStorage.setItem(\"todos\",JSON.stringify(todos))\n  }\n\n  const RemainingTodos = () => {\n    const remainingTodos = todos.filter(todo => todo.isDone === false)\n    return(\n        <>\n            <ListGroup>\n              {\n                remainingTodos.map(todo => {\n                  return(\n                    <ListGroupItem key={todo.id}>\n                      {todo.todoString}\n                      <span style={{float:\"right\"}} className={todo.isDone ? \"completed\" : \"\"} onClick={() => markComplete(todo.id)}>\n                        <FaCheckDouble />\n                      </span>\n                    </ListGroupItem>\n                  )\n                })\n              }\n            </ListGroup>\n        </>\n    )\n  }\n  \n\n  const AllTodos = () => {\n    \n    return(\n        \n            <ListGroup>\n              {\n                todos.map(todo => {\n                  return(\n                    <ListGroupItem key={todo.id}>\n                      {todo.todoString}\n                      <span style={{float:\"right\"}} className={todo.isDone ? \"completed\" : \"\"} onClick={() => markComplete(todo.id)}>\n                        <FaCheckDouble />\n                      </span>\n                    </ListGroupItem>\n                  )\n                })\n              }\n            </ListGroup>\n        \n    )\n  }\n\n  const CompletedTodos = () => {\n    const completedTodos = todos.filter(todo => todo.isDone !== false)\n    return(\n        <>\n            <ListGroup>\n              {\n                completedTodos.map(todo => {\n                  return(\n                    <ListGroupItem key={todo.id}>\n                      {todo.todoString}\n                      <span style={{float:\"right\"}} className={todo.isDone ? \"completed\" : \"\"} onClick={() => markComplete(todo.id)}>\n                        <FaCheckDouble />\n                      </span>\n                    </ListGroupItem>\n                  )\n                })\n              }\n            </ListGroup>\n        </>\n    )\n  }\n\n  return(\n    <>\n      <div className=\"wrapper\">\n        <div className=\"todo-form\">\n          <h1>ToDo</h1><br/>\n            <InputGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter Task Here\"\n                value={todoString}\n                onChange={e => setTodoString(e.target.value)}\n              />\n              <Button className=\"btn-info\" onClick={() => addTodo()}>ADD</Button>\n            </InputGroup>\n\n            <br/>\n\n            <InputGroup className=\"options\">\n              <Button className={currentView === 1 ? \"active-btn\" : \"\"} onClick={() => setCurrentView(1)}>All</Button>\n              <Button className={currentView === 2 ? \"active-btn\" : \"\"} onClick={() => setCurrentView(2)}>Completed</Button>\n              <Button className={currentView === 3 ? \"active-btn\" : \"\"} onClick={() => setCurrentView(3)}>Remaining</Button>\n            </InputGroup>\n\n\n        </div>\n        <div className=\"todo-list\">\n            {\n              currentView === 1 ? <AllTodos/> : currentView === 2 ? <CompletedTodos/> : <RemainingTodos/>\n            }\n        </div>\n        <Button className=\"btn-danger btn-clear\" onClick={clearTodos} disabled={todos.length === 0 ? true : false}>\n          Clear ToDos\n        </Button>\n      </div>\n    </>\n  )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}